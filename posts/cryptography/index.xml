<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptography Series on Daminha Blog</title>
    <link>https://dangduongminhnhat.github.io/posts/cryptography/</link>
    <description>Recent content in Cryptography Series on Daminha Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Aug 2025 12:50:54 +0700</lastBuildDate>
    <atom:link href="https://dangduongminhnhat.github.io/posts/cryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cryptography 4: Constructing Secure Stream Ciphers from PRGs</title>
      <link>https://dangduongminhnhat.github.io/posts/cryptography/p4/</link>
      <pubDate>Wed, 13 Aug 2025 12:50:54 +0700</pubDate>
      <guid>https://dangduongminhnhat.github.io/posts/cryptography/p4/</guid>
      <description>This post explores the stream cipher, a practical solution to the long-key problem of the One-Time Pad. We delve into how a &amp;ldquo;pseudo-random generator&amp;rdquo; (PRG) can &amp;ldquo;stretch&amp;rdquo; a short key (seed) into a long keystream for encryption. The article&amp;rsquo;s core focuses on the formal security definition of a PRG—the concept of &amp;ldquo;computational indistinguishability&amp;rdquo;—and presents a detailed proof demonstrating that a secure PRG leads to a semantically secure stream cipher</description>
    </item>
    <item>
      <title>Cryptography 3: Consequences and Interpretations of Semantic Security</title>
      <link>https://dangduongminhnhat.github.io/posts/cryptography/p3/</link>
      <pubDate>Tue, 05 Aug 2025 16:12:40 +0700</pubDate>
      <guid>https://dangduongminhnhat.github.io/posts/cryptography/p3/</guid>
      <description>This blog delves deeper into the meaning and consequences of semantic security, one of the foundational concepts of modern cryptography. We will begin by proving that a semantically secure encryption scheme does not allow an adversary to deduce even the smallest piece of partial information about the original message, such as its parity. Next, through the example of an Internet roulette game, the blog will illustrate how the definition of semantic security is applied to analyze the security of real-world applications. Finally, we will become acquainted with another, equivalent interpretation of semantic security—the bit-guessing game—a powerful and convenient tool commonly used in cryptographic proofs.</description>
    </item>
    <item>
      <title>Cryptography 2: Semantic Security Prevents Message Recovery Attacks — A Security Reduction Proof</title>
      <link>https://dangduongminhnhat.github.io/posts/cryptography/p2/</link>
      <pubDate>Tue, 08 Apr 2025 18:47:20 +0700</pubDate>
      <guid>https://dangduongminhnhat.github.io/posts/cryptography/p2/</guid>
      <description>This blog introduces the notion of message recovery attacks, defines the corresponding security game, and proves that semantic security implies message recovery security via a black-box reduction. A semantic adversary is constructed by wrapping around a message recovery adversary, showing that any success in message recovery would contradict semantic security. This sets the stage for future reductions that interrelate various cryptographic security notions.</description>
    </item>
    <item>
      <title>Cryptography 1: Perfect Security and the Limits of Perfect Security</title>
      <link>https://dangduongminhnhat.github.io/posts/cryptography/p1/</link>
      <pubDate>Fri, 28 Mar 2025 23:10:29 +0700</pubDate>
      <guid>https://dangduongminhnhat.github.io/posts/cryptography/p1/</guid>
      <description>This blog post explores the concept of Perfect Security in cryptography, which guarantees that observing a ciphertext provides no additional information about the original message. We establish a fundamental theorem stating that Perfect Security is equivalent to the statistical independence of ciphertexts and plaintexts. However, Shannon’s Theorem proves that achieving Perfect Security requires the secret key to be at least as long as the message, making practical implementations infeasible beyond small-scale use cases like the One-Time Pad.</description>
    </item>
  </channel>
</rss>
